 /* WARNING - DO NOT EDIT FILE - FILE IS AUTO GENERATED BY FUNCTIONS2CPP.PL*/
  /***************************************************************************
  *
  * Project:  OpenCPN
  * Purpose:  ROUTE Plugin
  * Author:   SaltyPaws
  *
  ***************************************************************************
  *   Copyright (C) 2012 by Brazil BrokeTail                                *
  *   $EMAIL$                                                               *
  *                                                                         *
  *   This program is free software; you can redistribute it and/or modify  *
  *   it under the terms of the GNU General Public License as published by  *
  *   the Free Software Foundation; either version 2 of the License, or     *
  *   (at your option) any later version.                                   *
  *                                                                         *
  *   This program is distributed in the hope that it will be useful,       *
  *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
  *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
  *   GNU General Public License for more details.                          *
  *                                                                         *
  *   You should have received a copy of the GNU General Public License     *
  *   along with this program; if not, write to the                         *
  *   Free Software Foundation, Inc.,                                       *
  *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
  ***************************************************************************
  */

#include "units_conversion.h"
Units_Conversion::Units_Conversion(void)
{

this->m_Unit.Add(_T("Degree (\u00b0)"));
this->m_Unit_category.Add(_T("Angle"));
this->m_Conversion.Add(_T("1"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Radians"));
this->m_Unit_category.Add(_T("Angle"));
this->m_Conversion.Add(_T("VAR/dtr=VAR*dtr"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Degree"));
this->m_Unit_category.Add(_T("Angle"));
this->m_Conversion.Add(_T("1"));
this->m_Display.Add(_T("FALSE"));

this->m_Unit.Add(_T("Meter"));
this->m_Unit_category.Add(_T("Distance"));
this->m_Conversion.Add(_T("1"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Nautical Miles"));
this->m_Unit_category.Add(_T("Distance"));
this->m_Conversion.Add(_T("1852"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("inch"));
this->m_Unit_category.Add(_T("Distance"));
this->m_Conversion.Add(_T("0.0254"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("feet"));
this->m_Unit_category.Add(_T("Distance"));
this->m_Conversion.Add(_T("0.3048"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("kilometer"));
this->m_Unit_category.Add(_T("Distance"));
this->m_Conversion.Add(_T("1000"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("foot"));
this->m_Unit_category.Add(_T("Distance"));
this->m_Conversion.Add(_T("0.3048"));
this->m_Display.Add(_T("FALSE"));

this->m_Unit.Add(_T("Fathom"));
this->m_Unit_category.Add(_T("Distance"));
this->m_Conversion.Add(_T("1.8288"));
this->m_Display.Add(_T("FALSE"));

this->m_Unit.Add(_T("m/s"));
this->m_Unit_category.Add(_T("Speed"));
this->m_Conversion.Add(_T("1"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Knots"));
this->m_Unit_category.Add(_T("Speed"));
this->m_Conversion.Add(_T("0.514444"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("km/h"));
this->m_Unit_category.Add(_T("Speed"));
this->m_Conversion.Add(_T("0.277778"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Celsius"));
this->m_Unit_category.Add(_T("Temperature"));
this->m_Conversion.Add(_T("1"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Kelvin"));
this->m_Unit_category.Add(_T("Temperature"));
this->m_Conversion.Add(_T("VAR - 273.15=VAR + 273.15"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Fahrenheit"));
this->m_Unit_category.Add(_T("Temperature"));
this->m_Conversion.Add(_T("(5/9) * (VAR - 32)=((9/5)* VAR)+32"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Rankine"));
this->m_Unit_category.Add(_T("Temperature"));
this->m_Conversion.Add(_T("(5/9)*(VAR-491.67)=(9/5)*(VAR + 273.15)"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("m3/s"));
this->m_Unit_category.Add(_T("Flowrate"));
this->m_Conversion.Add(_T("(1/0.0000630901964)"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("US gallons per minute"));
this->m_Unit_category.Add(_T("Flowrate"));
this->m_Conversion.Add(_T("1"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("liter per minute"));
this->m_Unit_category.Add(_T("Flowrate"));
this->m_Conversion.Add(_T("(1/3.78541178)"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Seconds"));
this->m_Unit_category.Add(_T("Time"));
this->m_Conversion.Add(_T("1"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Minutes"));
this->m_Unit_category.Add(_T("Time"));
this->m_Conversion.Add(_T("60"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Hours"));
this->m_Unit_category.Add(_T("Time"));
this->m_Conversion.Add(_T("3600"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Newton"));
this->m_Unit_category.Add(_T("Force"));
this->m_Conversion.Add(_T("1"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("lbs"));
this->m_Unit_category.Add(_T("Force"));
this->m_Conversion.Add(_T("4.4482216"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Square meter"));
this->m_Unit_category.Add(_T("Area"));
this->m_Conversion.Add(_T("1"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Square feet"));
this->m_Unit_category.Add(_T("Area"));
this->m_Conversion.Add(_T("0.092903"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Square cm"));
this->m_Unit_category.Add(_T("Area"));
this->m_Conversion.Add(_T("0.0001"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Centimeter"));
this->m_Unit_category.Add(_T("Distance"));
this->m_Conversion.Add(_T("0.01"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("bar"));
this->m_Unit_category.Add(_T("Pressure"));
this->m_Conversion.Add(_T("1"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("bara"));
this->m_Unit_category.Add(_T("Pressure"));
this->m_Conversion.Add(_T("1"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("barg"));
this->m_Unit_category.Add(_T("Pressure"));
this->m_Conversion.Add(_T("VAR-1=VAR+1"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("psia"));
this->m_Unit_category.Add(_T("Pressure"));
this->m_Conversion.Add(_T("0.0689475729"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("psi"));
this->m_Unit_category.Add(_T("Pressure"));
this->m_Conversion.Add(_T("0.0689475729"));
this->m_Display.Add(_T("FALSE"));

this->m_Unit.Add(_T("kPa"));
this->m_Unit_category.Add(_T("Pressure"));
this->m_Conversion.Add(_T("0.01"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Pa"));
this->m_Unit_category.Add(_T("Pressure"));
this->m_Conversion.Add(_T("1e-05"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("Inches of Mercury"));
this->m_Unit_category.Add(_T("Pressure"));
this->m_Conversion.Add(_T("0.03386"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("mBar"));
this->m_Unit_category.Add(_T("Pressure"));
this->m_Conversion.Add(_T("0.001"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("atm"));
this->m_Unit_category.Add(_T("Pressure"));
this->m_Conversion.Add(_T("0.987"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("mmHg"));
this->m_Unit_category.Add(_T("Pressure"));
this->m_Conversion.Add(_T("750.06"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("kg"));
this->m_Unit_category.Add(_T("Weight"));
this->m_Conversion.Add(_T("1"));
this->m_Display.Add(_T("2"));

this->m_Unit.Add(_T("Lbs (weight)"));
this->m_Unit_category.Add(_T("Weight"));
this->m_Conversion.Add(_T("2.20462"));
this->m_Display.Add(_T("3"));

this->m_Unit.Add(_T("gram"));
this->m_Unit_category.Add(_T("Weight"));
this->m_Conversion.Add(_T("0.001"));
this->m_Display.Add(_T("4"));

this->m_Unit.Add(_T("kg/m3"));
this->m_Unit_category.Add(_T("Density"));
this->m_Conversion.Add(_T("1"));
this->m_Display.Add(_T("TRUE"));

this->m_Unit.Add(_T("kg/liter"));
this->m_Unit_category.Add(_T("Density"));
this->m_Conversion.Add(_T("0.001"));
this->m_Display.Add(_T("TRUE"));

 //End Class

}